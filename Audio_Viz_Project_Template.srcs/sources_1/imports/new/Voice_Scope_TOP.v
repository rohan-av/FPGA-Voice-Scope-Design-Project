`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// National University of Singapore
// Department of Electrical and Computer Engineering
// EE2026 Digital Design
// AY1819 Semester 1
// Project: Voice Scope
//////////////////////////////////////////////////////////////////////////////////

module Voice_Scope_TOP(
    input Mouse_Clk,
    input Mouse_Data,
    input CLK,
    input waveform_sw,
    input ramp_sw,
    input axis_sw,
    input tick_sw,
    input freeze_sw,
    input advanced_sw,
    input custom_sw,
    input depth_button,
    input fill_button,
    input colour_button,
    input grid_button,
    input vert_button,
    input  J_MIC3_Pin3,   // PmodMIC3 audio input data (serial)
    output J_MIC3_Pin1,   // PmodMIC3 chip select, 20kHz sampling clock
    output J_MIC3_Pin4,   // PmodMIC3 serial clock (generated by module VoiceCapturer.v)
   
    output [3:0] VGA_RED,    // RGB outputs to VGA connector (4 bits per channel gives 4096 possible colors)
    output [3:0] VGA_GREEN,
    output [3:0] VGA_BLUE,
    
    output VGA_VS,          // horizontal & vertical sync outputs to VGA connector
    output VGA_HS,
    output [11:0] peakval,
    output [3:0] ss_enable,
    output [7:0] ss_active
    );
    
    //max volume indicator + accompanying text coordinates   
    
    //scaled wave properties
    parameter scale = 6;
    parameter xadjust = 30;
    parameter yadjust = 750;
      
       
//-----------------------------------------------------------------------------
//                  STUDENT A - MIC
//-----------------------------------------------------------------------------
   
   wire [2:0] colour_select;
   cycle_colour clr1 (CLK, colour_button, colour_select); 
   
   wire [2:0] grid_select;
   cycle_grid grd1 (CLK, grid_button, grid_select);
   
   wire [1:0] depth_select;
   cycle_depth dpt1 (CLK, depth_button, depth_select);
   
   wire [3:0] fill_select;
   cycle_fill fll1 (CLK, fill_button, fill_select);
   
   wire [1:0] vert_select;
   cycle_vert vrt1 (CLK, vert_button, vert_select);
       
// Please create a clock divider module to generate a 20kHz clock signal. 
// Instantiate it below
    
    wire [11:0] MIC_in;
    wire new_clock;
    wire newer_clock;
    clk_div c0(CLK,new_clock,newer_clock);
   
       
// Please instantiate the voice capturer module below

    Voice_Capturer vc1 ( 
     .CLK(CLK),
     .cs(new_clock),
     .MISO(J_MIC3_Pin3), 
     .clk_samp(J_MIC3_Pin1),
     .sclk(J_MIC3_Pin4), 
     .sample(MIC_in)
     );
    
    volume_indicator vi1 (
        .cs(new_clock),
        .sample(MIC_in),
        .freeze_sw(freeze_sw),
        .ramp_sw(ramp_sw),
        .intensity(peakval),
        .ss_enable(ss_enable),
        .ss_active(ss_active)
        );
//-----------------------------------------------------------------------------
//                  STUDENT B - VGA
//-----------------------------------------------------------------------------

    wire [11:0] VGA_HORZ_COORD;
    wire [11:0] VGA_VERT_COORD; 
    wire [9:0] test_wave;
    
    TestWave_Gen u1 (new_clock, test_wave);
    
// Please instantiate the waveform drawer module below
    
    wire [3:0] VGA_Red_waveform;
    wire [3:0] VGA_Green_waveform;
    wire [3:0] VGA_Blue_waveform;
    
    wire [3:0] VGA_Red_Joy_waveform;
    wire [3:0] VGA_Green_Joy_waveform;
    wire [3:0] VGA_Blue_Joy_waveform;
    
    wire [9:0] wave_sample; 
    wire [7:0] wave_sample_2;
    //wire [7:0] wave_sample_8;
    wire [11:0] avg;
  
    rolling_average ra(new_clock, MIC_in, freeze_sw, ramp_sw, avg);
    assign wave_sample = (ramp_sw == 0)? MIC_in[11:2] : test_wave;
    assign wave_sample_2 = avg[11:4];
   //assign wave_sample_8 = (ramp_sw == 0)? MIC_in[11:4] : test_wave;
    
    Draw_Waveform d1 (
    .clk_sample(new_clock),
    .freeze_sw(freeze_sw),
    .waveform_sw(waveform_sw),
    .advanced_sw(advanced_sw),
    .wave_sample(wave_sample),
    .VGA_HORZ_COORD(VGA_HORZ_COORD),
    .VGA_VERT_COORD(VGA_VERT_COORD),
    .colour_select(colour_select),
    .VGA_Red_waveform(VGA_Red_waveform),
    .VGA_Green_waveform(VGA_Green_waveform),
    .VGA_Blue_waveform(VGA_Blue_waveform)
    );
    
    Draw_Joy_Waveform dj1 (
    .clk_sample(new_clock),
    .freeze_sw(freeze_sw),
    .advanced_sw(advanced_sw),
    .wave_sample(wave_sample_2),
    .VGA_HORZ_COORD(VGA_HORZ_COORD),
    .VGA_VERT_COORD(VGA_VERT_COORD),
    .depth_select(depth_select),
    .fill_counter(fill_select),
    .VGA_Red_waveform(VGA_Red_Joy_waveform),
    .VGA_Green_waveform(VGA_Green_Joy_waveform),
    .VGA_Blue_waveform(VGA_Blue_Joy_waveform)
    );
    
// Please instantiate the background drawing module below   
    wire [3:0] VGA_Red_Grid;
    wire [3:0] VGA_Green_Grid;
    wire [3:0] VGA_Blue_Grid;
    wire [3:0] bgcolour_r;
    wire [3:0] bgcolour_g;
    wire [3:0] bgcolour_b;
    
    wire [3:0] VGA_SLCTR0;
    wire [3:0] VGA_SLCTG0;
    wire [3:0] VGA_SLCTB0;
    wire [3:0] VGA_SLCTR1;
    wire [3:0] VGA_SLCTG1;
    wire [3:0] VGA_SLCTB1;
    wire [3:0] VGA_SLCTR2;
    wire [3:0] VGA_SLCTG2;
    wire [3:0] VGA_SLCTB2;
    
    Draw_Background d2 (
    .VGA_HORZ_COORD(VGA_HORZ_COORD),
    .VGA_VERT_COORD(VGA_VERT_COORD),
    .advanced_sw(advanced_sw),
    .axis_sw(axis_sw),
    .tick_sw(tick_sw),
    .custom_sw(custom_sw),
    .colour_select(colour_select),
    .grid_select(grid_select),
    .VGA_CSTR(VGA_SLCTR0),
    .VGA_CSTG(VGA_SLCTG1),
    .VGA_CSTB(VGA_SLCTB2),
    .VGA_Red_Grid(VGA_Red_Grid),
    .VGA_Green_Grid(VGA_Green_Grid),
    .VGA_Blue_Grid(VGA_Blue_Grid),
    .R_bgcolour(bgcolour_r),
    .G_bgcolour(bgcolour_g),
    .B_bgcolour(bgcolour_b)
    
    );
    
    wire [3:0] VGA_Rvol;
    wire [3:0] VGA_Gvol;
    wire [3:0] VGA_Bvol;
    wire [3:0] level;
    
    volume_visual d3(
    .VGA_VERT_COORD(VGA_VERT_COORD),
    .VGA_HORZ_COORD(VGA_HORZ_COORD),
    .advanced_sw(advanced_sw),
    .intensity(peakval),
    .VGA_Red_Grid(VGA_Rvol),
    .VGA_Green_Grid(VGA_Gvol),
    .VGA_Blue_Grid(VGA_Bvol),
    .level(level)
    );
    
    wire [3:0] VGA_RBox;
    wire [3:0] VGA_GBox;
    wire [3:0] VGA_BBox;
    
    draw_boxes d4(
    .advanced_sw(advanced_sw),
    .VGA_HORZ_COORD(VGA_HORZ_COORD),
    .VGA_VERT_COORD(VGA_VERT_COORD),
    .VGA_Red_Grid(VGA_RBox),
    .VGA_Green_Grid(VGA_GBox),
    .VGA_Blue_Grid(VGA_BBox)
    );
    
    wire CLK_VGA;
    wire [3:0] MENU_TEXTR;
    wire [3:0] MENU_TEXTG;
    wire [3:0] MENU_TEXTB;
    
    menu_options d5(
    .freeze_sw(freeze_sw),
    .ramp_sw(ramp_sw),
    .waveform_sw(waveform_sw),
    .VGA_HORZ_COORD(VGA_HORZ_COORD),
    .VGA_VERT_COORD(VGA_VERT_COORD),
    .CLK_VGA(CLK_VGA),
    .MENU_TEXTR(MENU_TEXTR),
    .MENU_TEXTG(MENU_TEXTG),
    .MENU_TEXTB(MENU_TEXTB)
    );
    
    wire [3:0] MENU_OPTIONS;
    
    menu_clrselect d6(
    .VGA_HORZ_COORD(VGA_HORZ_COORD),
    .VGA_VERT_COORD(VGA_VERT_COORD),
    .CLK_VGA(CLK_VGA),
    .MENU_OPTIONS(MENU_OPTIONS)
    );
    
    wire [3:0] TEXTR;
    wire [3:0] TEXTG;
    wire [3:0] TEXTB;
    
    text_manager d7(
    .CLK(CLK),
    .advanced_sw(advanced_sw),
    .MENU_R(MENU_TEXTR),
    .MENU_G(MENU_TEXTG),
    .MENU_B(MENU_TEXTB),
    .VGA_HORZ_COORD(VGA_HORZ_COORD),
    .VGA_VERT_COORD(VGA_VERT_COORD),
    .MENU_OPTIONS(MENU_OPTIONS),
    .TEXTR(TEXTR),
    .TEXTG(TEXTG),
    .TEXTB(TEXTB)
    );
    
    wire [3:0] VGA_CBOXR;
    wire [3:0] VGA_CBOXG;
    wire [3:0] VGA_CBOXB;
    
    wire [3:0] VGA_CSTR0;
    wire [3:0] VGA_CSTG0;
    wire [3:0] VGA_CSTB0;
    wire [3:0] VGA_CSTR1;
    wire [3:0] VGA_CSTG1;
    wire [3:0] VGA_CSTB1;
    wire [3:0] VGA_CSTR2;
    wire [3:0] VGA_CSTG2;
    wire [3:0] VGA_CSTB2;
    
    wire [1:0] horz_counter_0;
    wire [1:0] horz_counter_1;
    wire [1:0] horz_counter_2;
    //wire [1:0] vert_select;
    
    mouse_sync m1 (
    .advanced_sw(advanced_sw),
    .clock_100Mhz(CLK),
    .Mouse_Data(Mouse_Data),
    .Mouse_Clk(Mouse_Clk),
    .vert_select(vert_select),
    .counter0(horz_counter_0),
    .counter1(horz_counter_1),
    .counter2(horz_counter_2)
    );
    
    clr_selection cs0 (
    .VGA_HORZ_COORD(VGA_HORZ_COORD),
    .VGA_VERT_COORD(VGA_VERT_COORD),
    .horz_counter(horz_counter_0),
    .vert_counter(0),
    .VGA_CSTR(VGA_CSTR0),
    .VGA_CSTG(VGA_CSTG0),
    .VGA_CSTB(VGA_CSTB0),
    .VGA_SLCTR(VGA_SLCTR0),
    .VGA_SLCTG(VGA_SLCTG0),
    .VGA_SLCTB(VGA_SLCTB0)
    );
    
    clr_selection cs1 (
    .VGA_HORZ_COORD(VGA_HORZ_COORD),
    .VGA_VERT_COORD(VGA_VERT_COORD),
    .horz_counter(horz_counter_1),
    .vert_counter(1),
    .VGA_CSTR(VGA_CSTR1),
    .VGA_CSTG(VGA_CSTG1),
    .VGA_CSTB(VGA_CSTB1),
    .VGA_SLCTR(VGA_SLCTR1),
    .VGA_SLCTG(VGA_SLCTG1),
    .VGA_SLCTB(VGA_SLCTB1)
    );
    
    clr_selection cs2 (
    .VGA_HORZ_COORD(VGA_HORZ_COORD),
    .VGA_VERT_COORD(VGA_VERT_COORD),
    .horz_counter(horz_counter_2),
    .vert_counter(2),
    .VGA_CSTR(VGA_CSTR2),
    .VGA_CSTG(VGA_CSTG2),
    .VGA_CSTB(VGA_CSTB2),
    .VGA_SLCTR(VGA_SLCTR2),
    .VGA_SLCTG(VGA_SLCTG2),
    .VGA_SLCTB(VGA_SLCTB2)
    );
    
    wire [3:0] VGA_BGR;
    wire [3:0] VGA_BGG;
    wire [3:0] VGA_BGB;
    wire [3:0] VGA_GRR;
    wire [3:0] VGA_GRG;
    wire [3:0] VGA_GRB;
    
    colour_boxes d8(
    .VGA_HORZ_COORD(VGA_HORZ_COORD),
    .VGA_VERT_COORD(VGA_VERT_COORD),
    .VGA_CBOXR(VGA_CBOXR),
    .VGA_CBOXG(VGA_CBOXG),
    .VGA_CBOXB(VGA_CBOXB)
    );
    
    wire [3:0] VGA_MENUR;
    wire [3:0] VGA_MENUG;
    wire [3:0] VGA_MENUB;
    
    menu_bg d9 (
    .VGA_HORZ_COORD(VGA_HORZ_COORD),
    .VGA_VERT_COORD(VGA_VERT_COORD),
    .advanced_sw(advanced_sw),
    .bgcolorr(bgcolour_r),
    .bgcolorg(bgcolour_g),
    .bgcolorb(bgcolour_b),
    .VGA_MENUR(VGA_MENUR),
    .VGA_MENUG(VGA_MENUG),
    .VGA_MENUB(VGA_MENUB)
    );
// Please instantiate the VGA display module below          
     VGA_DISPLAY d10(
     .CLK(CLK),
     .advanced_sw(advanced_sw),
     .level(level),
     .VGA_RED_WAVEFORM(VGA_Red_waveform),
     .VGA_GREEN_WAVEFORM(VGA_Green_waveform),
     .VGA_BLUE_WAVEFORM(VGA_Blue_waveform),
     .VGA_RED_JOY_WAVEFORM(VGA_Red_Joy_waveform),
     .VGA_GREEN_JOY_WAVEFORM(VGA_Green_Joy_waveform),
     .VGA_BLUE_JOY_WAVEFORM(VGA_Blue_Joy_waveform),
     .VGA_RED_GRID(VGA_Red_Grid),
     .VGA_GREEN_GRID(VGA_Green_Grid),
     .VGA_BLUE_GRID(VGA_Blue_Grid),
     .VGA_RED_VOL(VGA_Rvol),
     .VGA_GREEN_VOL(VGA_Gvol),
     .VGA_BLUE_VOL(VGA_Bvol),
     .VGA_RED_BOX(VGA_RBox),
     .VGA_GREEN_BOX(VGA_GBox),
     .VGA_BLUE_BOX(VGA_BBox),
     .VGA_CBOXR(VGA_CBOXR),
     .VGA_CBOXG(VGA_CBOXG),
     .VGA_CBOXB(VGA_CBOXB),
     .VGA_MENUR(VGA_MENUR),
     .VGA_MENUG(VGA_MENUG),
     .VGA_MENUB(VGA_MENUB),
     .TEXTR(TEXTR),
     .TEXTG(TEXTG),
     .TEXTB(TEXTB),
     .VGA_CSTR0(VGA_CSTR0),
     .VGA_CSTG0(VGA_CSTG0),
     .VGA_CSTB0(VGA_CSTB0),
     .VGA_CSTR1(VGA_CSTR1),
     .VGA_CSTG1(VGA_CSTG1),
     .VGA_CSTB1(VGA_CSTB1),
     .VGA_CSTR2(VGA_CSTR2),
     .VGA_CSTG2(VGA_CSTG2),
     .VGA_CSTB2(VGA_CSTB2),
     .VGA_HORZ_COORD(VGA_HORZ_COORD),
     .VGA_VERT_COORD(VGA_VERT_COORD),
     .VGA_RED(VGA_RED),
     .VGA_GREEN(VGA_GREEN),
     .VGA_BLUE(VGA_BLUE),
     .VGA_VS(VGA_VS),
     .VGA_HS(VGA_HS),
     .CLK_VGA(CLK_VGA)
     );
                      
endmodule
